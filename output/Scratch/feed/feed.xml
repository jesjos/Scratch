<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://yannesposito.com/</id>
  <title>Yogsototh's last blogs entries</title>
  <updated>2010-02-18T13:29:14Z</updated>
  <link href="http://yannesposito.com/" rel="alternate"/>
  <link href="http://feeds.feedburner.com/yannespositocomen" rel="self"/>
  <author>
    <name>Yann Esposito</name>
    <uri>http://yannesposito.com</uri>
  </author>
  <entry>
    <id>tag:yannesposito.com,2010-02-18:/Scratch/en/blog/2010-02-18-split-a-file-by-keyword/</id>
    <title type="html">split a file by keyword</title>
    <published>2010-02-18T13:29:14Z</published>
    <updated>2010-02-18T13:29:14Z</updated>
    <link href="http://yannesposito.com/Scratch/en/blog/2010-02-18-split-a-file-by-keyword/" rel="alternate"/>
    <content type="html">&lt;p&gt;Strangely enough, I didn&amp;rsquo;t find any built-in tool to split a file by keyword. I made one myself in &lt;code&gt;awk&lt;/code&gt;. I put it here mostly for myself. But it could also helps someone else.
The following code split a file for each line containing the word &lt;code&gt;UTC&lt;/code&gt;.&lt;/p&gt;

&lt;pre class="twilight"&gt;
&lt;span class="Comment"&gt;&lt;span class="Comment"&gt;#&lt;/span&gt;!/usr/bin/env awk&lt;/span&gt;
&lt;span class="Entity"&gt;BEGIN&lt;/span&gt;{i=0;}
&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;/&lt;/span&gt;UTC&lt;span class="StringRegexp"&gt;/&lt;/span&gt;&lt;/span&gt; { 
    i+=1;
    FIC=&lt;span class="SupportFunction"&gt;sprintf&lt;/span&gt;(&lt;span class="String"&gt;&lt;span class="String"&gt;&amp;quot;&lt;/span&gt;fic.%03d&lt;span class="String"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,i); 
} 
{&lt;span class="SupportFunction"&gt;print&lt;/span&gt; &lt;span class="Variable"&gt;&lt;span class="Variable"&gt;$&lt;/span&gt;0&lt;/span&gt;&amp;gt;&amp;gt;FIC}
&lt;/pre&gt;

&lt;p&gt;In my real world example, I wanted one file per day, each line containing UTC being in the following format:&lt;/p&gt;

&lt;pre class="twilight"&gt;
Mon Dec  7 10:32:30 UTC 2009
&lt;/pre&gt;

&lt;p&gt;I then finished with the following code:&lt;/p&gt;

&lt;pre class="twilight"&gt;
&lt;span class="Comment"&gt;&lt;span class="Comment"&gt;#&lt;/span&gt;!/usr/bin/env awk&lt;/span&gt;
&lt;span class="Entity"&gt;BEGIN&lt;/span&gt;{i=0;}
&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;/&lt;/span&gt;UTC&lt;span class="StringRegexp"&gt;/&lt;/span&gt;&lt;/span&gt; {
    date=&lt;span class="Variable"&gt;&lt;span class="Variable"&gt;$&lt;/span&gt;1&lt;/span&gt;&lt;span class="Variable"&gt;&lt;span class="Variable"&gt;$&lt;/span&gt;2&lt;/span&gt;&lt;span class="Variable"&gt;&lt;span class="Variable"&gt;$&lt;/span&gt;3&lt;/span&gt;; 
    &lt;span class="Keyword"&gt;if&lt;/span&gt; ( date&amp;nbsp;!= olddate ) {
        olddate=date;
        i+=1;
        FIC=&lt;span class="SupportFunction"&gt;sprintf&lt;/span&gt;(&lt;span class="String"&gt;&lt;span class="String"&gt;&amp;quot;&lt;/span&gt;fic.%03d&lt;span class="String"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,i); 
    }
} 
{&lt;span class="SupportFunction"&gt;print&lt;/span&gt; &lt;span class="Variable"&gt;&lt;span class="Variable"&gt;$&lt;/span&gt;0&lt;/span&gt;&amp;gt;&amp;gt;FIC}
&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <id>tag:yannesposito.com,2010-02-18:/Scratch/fr/blog/2010-02-18-split-a-file-by-keyword/</id>
    <title type="html">split a file by keyword</title>
    <published>2010-02-18T13:29:14Z</published>
    <updated>2010-02-18T13:29:14Z</updated>
    <link href="http://yannesposito.com/Scratch/fr/blog/2010-02-18-split-a-file-by-keyword/" rel="alternate"/>
    <content type="html">&lt;p&gt;Strangely enough, I didn&amp;rsquo;t find any built-in tool to split a file by keyword. I made one myself in &lt;code&gt;awk&lt;/code&gt;. I put it here mostly for myself. But it could also helps someone else.
The following code split a file for each line containing the word &lt;code&gt;UTC&lt;/code&gt;.&lt;/p&gt;

&lt;pre class="twilight"&gt;
&lt;span class="Comment"&gt;&lt;span class="Comment"&gt;#&lt;/span&gt;!/usr/bin/env awk&lt;/span&gt;
&lt;span class="Entity"&gt;BEGIN&lt;/span&gt;{i=0;}
&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;/&lt;/span&gt;UTC&lt;span class="StringRegexp"&gt;/&lt;/span&gt;&lt;/span&gt; { 
    i+=1;
    FIC=&lt;span class="SupportFunction"&gt;sprintf&lt;/span&gt;(&lt;span class="String"&gt;&lt;span class="String"&gt;&amp;quot;&lt;/span&gt;fic.%03d&lt;span class="String"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,i); 
} 
{&lt;span class="SupportFunction"&gt;print&lt;/span&gt; &lt;span class="Variable"&gt;&lt;span class="Variable"&gt;$&lt;/span&gt;0&lt;/span&gt;&amp;gt;&amp;gt;FIC}
&lt;/pre&gt;

&lt;p&gt;In my real world example, I wanted one file per day, each line containing UTC being in the following format:&lt;/p&gt;

&lt;pre class="twilight"&gt;
Mon Dec  7 10:32:30 UTC 2009
&lt;/pre&gt;

&lt;p&gt;I then finished with the following code:&lt;/p&gt;

&lt;pre class="twilight"&gt;
&lt;span class="Comment"&gt;&lt;span class="Comment"&gt;#&lt;/span&gt;!/usr/bin/env awk&lt;/span&gt;
&lt;span class="Entity"&gt;BEGIN&lt;/span&gt;{i=0;}
&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;/&lt;/span&gt;UTC&lt;span class="StringRegexp"&gt;/&lt;/span&gt;&lt;/span&gt; {
    date=&lt;span class="Variable"&gt;&lt;span class="Variable"&gt;$&lt;/span&gt;1&lt;/span&gt;&lt;span class="Variable"&gt;&lt;span class="Variable"&gt;$&lt;/span&gt;2&lt;/span&gt;&lt;span class="Variable"&gt;&lt;span class="Variable"&gt;$&lt;/span&gt;3&lt;/span&gt;; 
    &lt;span class="Keyword"&gt;if&lt;/span&gt; ( date&amp;nbsp;!= olddate ) {
        olddate=date;
        i+=1;
        FIC=&lt;span class="SupportFunction"&gt;sprintf&lt;/span&gt;(&lt;span class="String"&gt;&lt;span class="String"&gt;&amp;quot;&lt;/span&gt;fic.%03d&lt;span class="String"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,i); 
    }
} 
{&lt;span class="SupportFunction"&gt;print&lt;/span&gt; &lt;span class="Variable"&gt;&lt;span class="Variable"&gt;$&lt;/span&gt;0&lt;/span&gt;&amp;gt;&amp;gt;FIC}
&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <id>tag:yannesposito.com,2010-02-16:/Scratch/en/blog/2010-02-16-All-but-something-regexp--2-/</id>
    <title type="html">All but something regexp (2)</title>
    <published>2010-02-16T08:33:21Z</published>
    <updated>2010-02-16T08:33:21Z</updated>
    <link href="http://yannesposito.com/Scratch/en/blog/2010-02-16-All-but-something-regexp--2-/" rel="alternate"/>
    <content type="html">&lt;p&gt;In my &lt;a href="previouspost"&gt;previous post&lt;/a&gt; I had given some trick to match all except something. On the same idea, the trick to match the smallest possible string. Say you want to match the string between &amp;lsquo;a&amp;rsquo; and &amp;lsquo;b&amp;rsquo;, for example, you want to match:&lt;/p&gt;

&lt;pre class="twilight"&gt;
a.....&lt;span class="Constant"&gt;&lt;strong&gt;a......b&lt;/strong&gt;&lt;/span&gt;..b..a....&lt;span class="Constant"&gt;&lt;strong&gt;a....b&lt;/strong&gt;&lt;/span&gt;...
&lt;/pre&gt;

&lt;p&gt;Here are two common errors and a solution:&lt;/p&gt;

&lt;pre class="twilight"&gt;
/a.*b/
&lt;span class="Constant"&gt;&lt;strong&gt;a.....a......b..b..a....a....b&lt;/strong&gt;&lt;/span&gt;...
&lt;/pre&gt;

&lt;pre class="twilight"&gt;
/a.*?b/
&lt;span class="Constant"&gt;&lt;strong&gt;a.....a......b&lt;/strong&gt;&lt;/span&gt;..b..&lt;span class="Constant"&gt;&lt;strong&gt;a....a....b&lt;/strong&gt;&lt;/span&gt;...
&lt;/pre&gt;

&lt;pre class="twilight"&gt;
/a[^ab]*b/
a.....&lt;span class="Constant"&gt;&lt;strong&gt;a......b&lt;/strong&gt;&lt;/span&gt;..b..a....&lt;span class="Constant"&gt;&lt;strong&gt;a....b&lt;/strong&gt;&lt;/span&gt;...
&lt;/pre&gt;

&lt;p&gt;The first error is to use the &lt;em&gt;evil&lt;/em&gt; &lt;code&gt;.*&lt;/code&gt;. Because you will match from the first to the last. The next natural way, is to change the &lt;em&gt;greediness&lt;/em&gt;. But it is not enough as you will match from the first &lt;code&gt;a&lt;/code&gt; to the first &lt;code&gt;b&lt;/code&gt;. Then a simple constatation is that our matching string shouldn&amp;rsquo;t contain any &lt;code&gt;a&lt;/code&gt; nor &lt;code&gt;b&lt;/code&gt;. Which lead to the last elegant solution.&lt;/p&gt;

&lt;p&gt;Until now, that was, easy. Now, how do you manage when instead of &lt;code&gt;a&lt;/code&gt; you have a string?&lt;/p&gt;

&lt;p&gt;Say you want to match: &lt;/p&gt;
&lt;pre class="twilight"&gt;
&amp;lt;li&amp;gt;...&amp;lt;li&amp;gt;
&lt;/pre&gt;

&lt;p&gt;This is a bit difficult. You need to match &lt;/p&gt;
&lt;pre class="twilight"&gt;
&amp;lt;li&amp;gt;[anything not containing &amp;lt;li&amp;gt;]&amp;lt;/li&amp;gt;
&lt;/pre&gt;

&lt;p&gt;The first method would be to use the same reasoning as in my &lt;a href="previouspost"&gt;previous post&lt;/a&gt;. Here is a first try:&lt;/p&gt;

&lt;pre class="twilight"&gt;
&amp;lt;li&amp;gt;([^&amp;lt;]|&amp;lt;[^l]|&amp;lt;l[^i]|&amp;lt;li[^&amp;gt;])*&amp;lt;/li&amp;gt;
&lt;/pre&gt;

&lt;p&gt;But what about the following string: &lt;/p&gt;
&lt;pre class="twilight"&gt;
&amp;lt;li&amp;gt;...&amp;lt;li&amp;lt;/li&amp;gt;
&lt;/pre&gt;

&lt;p&gt;That string should not match. This is why if we really want to match it correctly&lt;sup&gt;&lt;a href="#note1"&gt;&amp;dagger;&lt;/a&gt;&lt;/sup&gt; we need to add:&lt;/p&gt;
&lt;pre class="twilight"&gt;
&amp;lt;li&amp;gt;([^&amp;lt;]|&amp;lt;[^l]|&amp;lt;l[^i]|&amp;lt;li[^&amp;gt;])*(|&amp;lt;|&amp;lt;l|&amp;lt;li)&amp;lt;/li&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Yes a bit complicated. But what if the string I wanted to match was even longer?&lt;/p&gt;

&lt;p&gt;Here is the algorithm way to handle this easily. You reduce the problem to the first one letter matching:&lt;/p&gt;

&lt;pre class="twilight"&gt;
&lt;span class="Comment"&gt;&lt;span class="Comment"&gt;#&lt;/span&gt; transform a simple randomly choosen character&lt;/span&gt;
&lt;span class="Comment"&gt;&lt;span class="Comment"&gt;#&lt;/span&gt; to an unique ID &lt;/span&gt;
&lt;span class="Comment"&gt;&lt;span class="Comment"&gt;#&lt;/span&gt; (you should verify the identifier is REALLY unique)&lt;/span&gt;
&lt;span class="Comment"&gt;&lt;span class="Comment"&gt;#&lt;/span&gt; beware the unique ID must not contain the &lt;/span&gt;
&lt;span class="Comment"&gt;&lt;span class="Comment"&gt;#&lt;/span&gt; choosen character&lt;/span&gt;
&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;&lt;span class="SupportFunction"&gt;s&lt;/span&gt;/&lt;/span&gt;X&lt;/span&gt;&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;/&lt;/span&gt;_was_x_&lt;span class="StringRegexp"&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;&lt;span class="Keyword"&gt;g&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;&lt;span class="SupportFunction"&gt;s&lt;/span&gt;/&lt;/span&gt;Y&lt;/span&gt;&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;/&lt;/span&gt;_was_y_&lt;span class="StringRegexp"&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;&lt;span class="Keyword"&gt;g&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class="Comment"&gt;&lt;span class="Comment"&gt;#&lt;/span&gt; transform the long string in this simple character&lt;/span&gt;
&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;&lt;span class="SupportFunction"&gt;s&lt;/span&gt;/&lt;/span&gt;&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;/&lt;/span&gt;X&lt;span class="StringRegexp"&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;&lt;span class="Keyword"&gt;g&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;&lt;span class="SupportFunction"&gt;s&lt;/span&gt;/&lt;/span&gt;&amp;lt;&lt;span class="StringRegexpSpecial"&gt;\/&lt;/span&gt;li&amp;gt;&lt;/span&gt;&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;/&lt;/span&gt;Y&lt;span class="StringRegexp"&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;&lt;span class="Keyword"&gt;g&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class="Comment"&gt;&lt;span class="Comment"&gt;#&lt;/span&gt; use the first method&lt;/span&gt;
&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;&lt;span class="SupportFunction"&gt;s&lt;/span&gt;/&lt;/span&gt;X([^X]*)Y&lt;/span&gt;&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;/&lt;/span&gt;&lt;span class="StringRegexp"&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;&lt;span class="Keyword"&gt;g&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class="Comment"&gt;&lt;span class="Comment"&gt;#&lt;/span&gt; retransform choosen letter by string&lt;/span&gt;
&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;&lt;span class="SupportFunction"&gt;s&lt;/span&gt;/&lt;/span&gt;X&lt;/span&gt;&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;/&lt;/span&gt;&amp;lt;li&amp;gt;&lt;span class="StringRegexp"&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;&lt;span class="Keyword"&gt;g&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;&lt;span class="SupportFunction"&gt;s&lt;/span&gt;/&lt;/span&gt;Y&lt;/span&gt;&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;/&lt;/span&gt;&amp;lt;&lt;span class="StringRegexpSpecial"&gt;\/&lt;/span&gt;li&amp;gt;&lt;span class="StringRegexp"&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;&lt;span class="Keyword"&gt;g&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class="Comment"&gt;&lt;span class="Comment"&gt;#&lt;/span&gt; retransform the choosen character back&lt;/span&gt;
&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;&lt;span class="SupportFunction"&gt;s&lt;/span&gt;/&lt;/span&gt;_was_x_&lt;/span&gt;&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;/&lt;/span&gt;X&lt;span class="StringRegexp"&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;&lt;span class="Keyword"&gt;g&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;&lt;span class="SupportFunction"&gt;s&lt;/span&gt;/&lt;/span&gt;_was_y_&lt;/span&gt;&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;/&lt;/span&gt;Y&lt;span class="StringRegexp"&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;&lt;span class="Keyword"&gt;g&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;And it works in only 9 lines for any beginning and ending string. This solution should look less &lt;em&gt;I AM THE GREAT REGEXP M45T3R, URAN00B&lt;/em&gt;, but is more convenient in my humble opinion. Further more, using this last solution prove you master regexp, because you know it is difficult to manage such problems with only a regexp.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;small&gt;&lt;a name="note1"&gt;&lt;sup&gt;&amp;dagger;&lt;/sup&gt;&lt;/a&gt; I know I used an HTML syntax example, but in my real life usage, I needed to match between &lt;code&gt;and&lt;/code&gt;. And sometimes the string could finish with &lt;code&gt;e::&lt;/code&gt;.&lt;/small&gt;&lt;/p&gt;

</content>
  </entry>
  <entry>
    <id>tag:yannesposito.com,2010-02-16:/Scratch/fr/blog/2010-02-16-All-but-something-regexp--2-/</id>
    <title type="html">All but something regexp (2)</title>
    <published>2010-02-16T08:33:21Z</published>
    <updated>2010-02-16T08:33:21Z</updated>
    <link href="http://yannesposito.com/Scratch/fr/blog/2010-02-16-All-but-something-regexp--2-/" rel="alternate"/>
    <content type="html">&lt;p&gt;In my &lt;a href="previouspost"&gt;previous post&lt;/a&gt; I had given some trick to match all except something. On the same idea, the trick to match the smallest possible string. Say you want to match the string between &amp;lsquo;a&amp;rsquo; and &amp;lsquo;b&amp;rsquo;, for example, you want to match:&lt;/p&gt;

&lt;pre class="twilight"&gt;
a.....&lt;span class="Constant"&gt;&lt;strong&gt;a......b&lt;/strong&gt;&lt;/span&gt;..b..a....&lt;span class="Constant"&gt;&lt;strong&gt;a....b&lt;/strong&gt;&lt;/span&gt;...
&lt;/pre&gt;

&lt;p&gt;Here are two common errors and a solution:&lt;/p&gt;

&lt;pre class="twilight"&gt;
/a.*b/
&lt;span class="Constant"&gt;&lt;strong&gt;a.....a......b..b..a....a....b&lt;/strong&gt;&lt;/span&gt;...
&lt;/pre&gt;

&lt;pre class="twilight"&gt;
/a.*?b/
&lt;span class="Constant"&gt;&lt;strong&gt;a.....a......b&lt;/strong&gt;&lt;/span&gt;..b..&lt;span class="Constant"&gt;&lt;strong&gt;a....a....b&lt;/strong&gt;&lt;/span&gt;...
&lt;/pre&gt;

&lt;pre class="twilight"&gt;
/a[^ab]*b/
a.....&lt;span class="Constant"&gt;&lt;strong&gt;a......b&lt;/strong&gt;&lt;/span&gt;..b..a....&lt;span class="Constant"&gt;&lt;strong&gt;a....b&lt;/strong&gt;&lt;/span&gt;...
&lt;/pre&gt;

&lt;p&gt;The first error is to use the &lt;em&gt;evil&lt;/em&gt; &lt;code&gt;.*&lt;/code&gt;. Because you will match from the first to the last. The next natural way, is to change the &lt;em&gt;greediness&lt;/em&gt;. But it is not enough as you will match from the first &lt;code&gt;a&lt;/code&gt; to the first &lt;code&gt;b&lt;/code&gt;. Then a simple constatation is that our matching string shouldn&amp;rsquo;t contain any &lt;code&gt;a&lt;/code&gt; nor &lt;code&gt;b&lt;/code&gt;. Which lead to the last elegant solution.&lt;/p&gt;

&lt;p&gt;Until now, that was, easy. Now, how do you manage when instead of &lt;code&gt;a&lt;/code&gt; you have a string?&lt;/p&gt;

&lt;p&gt;Say you want to match: &lt;/p&gt;
&lt;pre class="twilight"&gt;
&amp;lt;li&amp;gt;...&amp;lt;li&amp;gt;
&lt;/pre&gt;

&lt;p&gt;This is a bit difficult. You need to match &lt;/p&gt;
&lt;pre class="twilight"&gt;
&amp;lt;li&amp;gt;[anything not containing &amp;lt;li&amp;gt;]&amp;lt;/li&amp;gt;
&lt;/pre&gt;

&lt;p&gt;The first method would be to use the same reasoning as in my &lt;a href="previouspost"&gt;previous post&lt;/a&gt;. Here is a first try:&lt;/p&gt;

&lt;pre class="twilight"&gt;
&amp;lt;li&amp;gt;([^&amp;lt;]|&amp;lt;[^l]|&amp;lt;l[^i]|&amp;lt;li[^&amp;gt;])*&amp;lt;/li&amp;gt;
&lt;/pre&gt;

&lt;p&gt;But what about the following string: &lt;/p&gt;
&lt;pre class="twilight"&gt;
&amp;lt;li&amp;gt;...&amp;lt;li&amp;lt;/li&amp;gt;
&lt;/pre&gt;

&lt;p&gt;That string should not match. This is why if we really want to match it correctly&lt;sup&gt;&lt;a href="#note1"&gt;&amp;dagger;&lt;/a&gt;&lt;/sup&gt; we need to add:&lt;/p&gt;
&lt;pre class="twilight"&gt;
&amp;lt;li&amp;gt;([^&amp;lt;]|&amp;lt;[^l]|&amp;lt;l[^i]|&amp;lt;li[^&amp;gt;])*(|&amp;lt;|&amp;lt;l|&amp;lt;li)&amp;lt;/li&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Yes a bit complicated. But what if the string I wanted to match was even longer?&lt;/p&gt;

&lt;p&gt;Here is the algorithm way to handle this easily. You reduce the problem to the first one letter matching:&lt;/p&gt;

&lt;pre class="twilight"&gt;
&lt;span class="Comment"&gt;&lt;span class="Comment"&gt;#&lt;/span&gt; transform a simple randomly choosen character&lt;/span&gt;
&lt;span class="Comment"&gt;&lt;span class="Comment"&gt;#&lt;/span&gt; to an unique ID &lt;/span&gt;
&lt;span class="Comment"&gt;&lt;span class="Comment"&gt;#&lt;/span&gt; (you should verify the identifier is REALLY unique)&lt;/span&gt;
&lt;span class="Comment"&gt;&lt;span class="Comment"&gt;#&lt;/span&gt; beware the unique ID must not contain the &lt;/span&gt;
&lt;span class="Comment"&gt;&lt;span class="Comment"&gt;#&lt;/span&gt; choosen character&lt;/span&gt;
&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;&lt;span class="SupportFunction"&gt;s&lt;/span&gt;/&lt;/span&gt;X&lt;/span&gt;&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;/&lt;/span&gt;_was_x_&lt;span class="StringRegexp"&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;&lt;span class="Keyword"&gt;g&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;&lt;span class="SupportFunction"&gt;s&lt;/span&gt;/&lt;/span&gt;Y&lt;/span&gt;&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;/&lt;/span&gt;_was_y_&lt;span class="StringRegexp"&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;&lt;span class="Keyword"&gt;g&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class="Comment"&gt;&lt;span class="Comment"&gt;#&lt;/span&gt; transform the long string in this simple character&lt;/span&gt;
&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;&lt;span class="SupportFunction"&gt;s&lt;/span&gt;/&lt;/span&gt;&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;/&lt;/span&gt;X&lt;span class="StringRegexp"&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;&lt;span class="Keyword"&gt;g&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;&lt;span class="SupportFunction"&gt;s&lt;/span&gt;/&lt;/span&gt;&amp;lt;&lt;span class="StringRegexpSpecial"&gt;\/&lt;/span&gt;li&amp;gt;&lt;/span&gt;&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;/&lt;/span&gt;Y&lt;span class="StringRegexp"&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;&lt;span class="Keyword"&gt;g&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class="Comment"&gt;&lt;span class="Comment"&gt;#&lt;/span&gt; use the first method&lt;/span&gt;
&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;&lt;span class="SupportFunction"&gt;s&lt;/span&gt;/&lt;/span&gt;X([^X]*)Y&lt;/span&gt;&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;/&lt;/span&gt;&lt;span class="StringRegexp"&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;&lt;span class="Keyword"&gt;g&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class="Comment"&gt;&lt;span class="Comment"&gt;#&lt;/span&gt; retransform choosen letter by string&lt;/span&gt;
&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;&lt;span class="SupportFunction"&gt;s&lt;/span&gt;/&lt;/span&gt;X&lt;/span&gt;&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;/&lt;/span&gt;&amp;lt;li&amp;gt;&lt;span class="StringRegexp"&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;&lt;span class="Keyword"&gt;g&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;&lt;span class="SupportFunction"&gt;s&lt;/span&gt;/&lt;/span&gt;Y&lt;/span&gt;&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;/&lt;/span&gt;&amp;lt;&lt;span class="StringRegexpSpecial"&gt;\/&lt;/span&gt;li&amp;gt;&lt;span class="StringRegexp"&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;&lt;span class="Keyword"&gt;g&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class="Comment"&gt;&lt;span class="Comment"&gt;#&lt;/span&gt; retransform the choosen character back&lt;/span&gt;
&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;&lt;span class="SupportFunction"&gt;s&lt;/span&gt;/&lt;/span&gt;_was_x_&lt;/span&gt;&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;/&lt;/span&gt;X&lt;span class="StringRegexp"&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;&lt;span class="Keyword"&gt;g&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;&lt;span class="SupportFunction"&gt;s&lt;/span&gt;/&lt;/span&gt;_was_y_&lt;/span&gt;&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;/&lt;/span&gt;Y&lt;span class="StringRegexp"&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;&lt;span class="Keyword"&gt;g&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;And it works in only 9 lines for any beginning and ending string. This solution should look less &lt;em&gt;I AM THE GREAT REGEXP M45T3R, URAN00B&lt;/em&gt;, but is more convenient in my humble opinion. Further more, using this last solution prove you master regexp, because you know it is difficult to manage such problems with only a regexp.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;small&gt;&lt;a name="note1"&gt;&lt;sup&gt;&amp;dagger;&lt;/sup&gt;&lt;/a&gt; I know I used an HTML syntax example, but in my real life usage, I needed to match between ``. And sometimes the string could finish with &lt;code&gt;e::&lt;/code&gt;.&lt;/small&gt;&lt;/p&gt;

</content>
  </entry>
  <entry>
    <id>tag:yannesposito.com,2010-02-15:/Scratch/en/blog/2010-02-15-All-but-something-regexp/</id>
    <title type="html">All but something regexp</title>
    <published>2010-02-15T09:16:12Z</published>
    <updated>2010-02-15T09:16:12Z</updated>
    <link href="http://yannesposito.com/Scratch/en/blog/2010-02-15-All-but-something-regexp/" rel="alternate"/>
    <content type="html">&lt;p&gt;Sometimes you cannot simply write:&lt;/p&gt;

&lt;pre class="twilight"&gt;
&lt;span class="Keyword"&gt;if&lt;/span&gt; str.&lt;span class="Entity"&gt;match&lt;/span&gt;(regexp) &lt;span class="Keyword"&gt;and&lt;/span&gt; 
    &lt;span class="Keyword"&gt;not&lt;/span&gt; str.&lt;span class="Entity"&gt;match&lt;/span&gt;(other_regexp)
        do_something
&lt;/pre&gt;

&lt;p&gt;and you have to make this behaviour with only one regular expression. The problem is the complementary of regular languages is not regular. Then, for some expression it is absolutely not impossible.&lt;/p&gt;

&lt;p&gt;But sometimes with some simple regular expression it should be possible&lt;sup&gt;&lt;a href="#note1"&gt;&amp;dagger;&lt;/a&gt;&lt;/sup&gt;. Say you want to match everything containing the some word say &lt;code&gt;bull&lt;/code&gt; but don&amp;rsquo;t want to match &lt;code&gt;bullshit&lt;/code&gt;. Here is a nice way to do that:&lt;/p&gt;

&lt;pre class="twilight"&gt;
&lt;span class="Comment"&gt;&lt;span class="Comment"&gt;#&lt;/span&gt; match all string containing 'bull' (bullshit comprised)&lt;/span&gt;
&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class="StringRegexp"&gt;bull&lt;/span&gt;&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;/&lt;/span&gt;&lt;/span&gt;

&lt;span class="Comment"&gt;&lt;span class="Comment"&gt;#&lt;/span&gt; match all string containing 'bull' except 'bullshit'&lt;/span&gt;
&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class="StringRegexp"&gt;bull&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;(&lt;/span&gt;&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;[&lt;/span&gt;^s&lt;span class="StringRegexp"&gt;]&lt;/span&gt;&lt;/span&gt;|$&lt;span class="StringRegexp"&gt;)&lt;/span&gt;&lt;/span&gt;|&lt;/span&gt;
&lt;span class="StringRegexp"&gt;bulls&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;(&lt;/span&gt;&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;[&lt;/span&gt;^h&lt;span class="StringRegexp"&gt;]&lt;/span&gt;&lt;/span&gt;|$&lt;span class="StringRegexp"&gt;)&lt;/span&gt;&lt;/span&gt;|&lt;/span&gt;
&lt;span class="StringRegexp"&gt;bullsh&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;(&lt;/span&gt;&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;[&lt;/span&gt;^i&lt;span class="StringRegexp"&gt;]&lt;/span&gt;&lt;/span&gt;|$&lt;span class="StringRegexp"&gt;)&lt;/span&gt;&lt;/span&gt;|&lt;/span&gt;
&lt;span class="StringRegexp"&gt;bullshi&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;(&lt;/span&gt;&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;[&lt;/span&gt;^t&lt;span class="StringRegexp"&gt;]&lt;/span&gt;&lt;/span&gt;|$&lt;span class="StringRegexp"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;/&lt;/span&gt;&lt;/span&gt;

&lt;span class="Comment"&gt;&lt;span class="Comment"&gt;#&lt;/span&gt; another way to write it would be&lt;/span&gt;
&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class="StringRegexp"&gt;bull&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;(&lt;/span&gt;&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;[&lt;/span&gt;^s&lt;span class="StringRegexp"&gt;]&lt;/span&gt;&lt;/span&gt;|$|s&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;(&lt;/span&gt;&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;[&lt;/span&gt;^h&lt;span class="StringRegexp"&gt;]&lt;/span&gt;&lt;/span&gt;|$&lt;span class="StringRegexp"&gt;)&lt;/span&gt;&lt;/span&gt;|sh&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;(&lt;/span&gt;&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;[&lt;/span&gt;^i&lt;span class="StringRegexp"&gt;]&lt;/span&gt;&lt;/span&gt;|$&lt;span class="StringRegexp"&gt;)&lt;/span&gt;&lt;/span&gt;|shi&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;(&lt;/span&gt;&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;[&lt;/span&gt;^t&lt;span class="StringRegexp"&gt;]&lt;/span&gt;&lt;/span&gt;|$&lt;span class="StringRegexp"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="StringRegexp"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;/&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;Let look closer. In the first line the expression is:
&lt;code&gt;bull([^s]|$)&lt;/code&gt;, why does the &lt;code&gt;$&lt;/code&gt; is needed?
Because, without it the word &lt;code&gt;bull&lt;/code&gt; would be no more matched. This expression means:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The string finish by &lt;code&gt;bull&lt;/code&gt;  &lt;br /&gt;
or, &lt;br /&gt;
contains &lt;code&gt;bull&lt;/code&gt; followed by a letter different from &lt;code&gt;s&lt;/code&gt;. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And this is it. I hope it could help you.&lt;/p&gt;

&lt;p&gt;Notice this method is not always the best. For example try to write a regular expression equivalent to the following conditional expression:&lt;/p&gt;
&lt;pre class="twilight"&gt;
&lt;span class="Comment"&gt;&lt;span class="Comment"&gt;#&lt;/span&gt; Begin with 'a': ^a&lt;/span&gt;
&lt;span class="Comment"&gt;&lt;span class="Comment"&gt;#&lt;/span&gt; End with 'a': c$&lt;/span&gt;
&lt;span class="Comment"&gt;&lt;span class="Comment"&gt;#&lt;/span&gt; Contain 'b': .*b.*&lt;/span&gt;
&lt;span class="Comment"&gt;&lt;span class="Comment"&gt;#&lt;/span&gt; But isn't 'axbxc'&lt;/span&gt;
&lt;span class="Keyword"&gt;if&lt;/span&gt; str.&lt;span class="Entity"&gt;match&lt;/span&gt;(&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class="StringRegexp"&gt;^a.*b.*c$&lt;/span&gt;&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;/&lt;/span&gt;&lt;/span&gt;) &lt;span class="Keyword"&gt;and&lt;/span&gt; 
        &lt;span class="Keyword"&gt;not&lt;/span&gt; str.&lt;span class="Entity"&gt;match&lt;/span&gt;(&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class="StringRegexp"&gt;^axbxc$&lt;/span&gt;&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;/&lt;/span&gt;&lt;/span&gt;)
    do_something
&lt;span class="Keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;A nice solution is:&lt;/p&gt;

&lt;pre class="twilight"&gt;
&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class="StringRegexp"&gt;abc|           &lt;span class="Comment"&gt;&lt;span class="Comment"&gt;#&lt;/span&gt; length 3&lt;/span&gt;&lt;/span&gt;
&lt;span class="StringRegexp"&gt;a.bc|           &lt;span class="Comment"&gt;&lt;span class="Comment"&gt;#&lt;/span&gt; length 4&lt;/span&gt;&lt;/span&gt;
&lt;span class="StringRegexp"&gt;ab.c|&lt;/span&gt;
&lt;span class="StringRegexp"&gt;a&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;[&lt;/span&gt;^x&lt;span class="StringRegexp"&gt;]&lt;/span&gt;&lt;/span&gt;b&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;[&lt;/span&gt;^x&lt;span class="StringRegexp"&gt;]&lt;/span&gt;&lt;/span&gt;c|    &lt;span class="Comment"&gt;&lt;span class="Comment"&gt;#&lt;/span&gt; length 5&lt;/span&gt;&lt;/span&gt;
&lt;span class="StringRegexp"&gt;a...*b.*c|      # length &amp;gt;5&lt;/span&gt;
&lt;span class="StringRegexp"&gt;a.*b...*c&lt;/span&gt;&lt;span class="StringRegexp"&gt;&lt;span class="StringRegexp"&gt;/&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;This solution uses the maximal length of the string not to be matched.
There certainly exists many other methods. But the important lesson is
it is not straightforward to exclude something of a regular expression.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;small&gt;&lt;a name="note1"&gt;&amp;dagger;&lt;/a&gt;
It can be proved that any regular set minus a finite set is also regular.
&lt;/small&gt;&lt;/p&gt;
</content>
  </entry>
</feed>
